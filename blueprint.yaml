#################################################################
# Cloudify Blueprint which describes the nodecellar application`#
# https://github.com/ccoenraets/nodecellar                      #
# Author: kemiz                                                 #
#################################################################

tosca_definitions_version: cloudify_dsl_1_0

imports:
    - http://www.getcloudify.org/spec/cloudify/3.1m5/types.yaml


################################################################
# Blueprint inputs
# 
# The values are provided via the inputs.json file.
# passed when creating the deployment (-i inputs.json).
################################################################
inputs:

    host_ip:
        description: >
            The ip of the host the application will be deployed on        

    agent_user:
        description: >
            User name used when SSH-ing into the started machine

    agent_private_key_path:
        description: >
            Path to a private key that resided on the management machine.
            SSH-ing into agent machines will be done with this key.

    app_name:
        description: >
            Name of the app to be deployed

    git_url:
        description: > 
            Web applications Git url

    git_branch:
        description: >
            The Git branch

    base_port:
        description: >
            Web application port

#################################################################
# Blueprint types
#
# Custom types for this blueprint.
#################################################################
node_types:

  docker_container:
    derived_from: cloudify.types.app_server

  dockerised_app:
    derived_from: cloudify.types.app_module
    properties:

      app_name:
        description: Application name
        type: string

      git_url:
        description: Web application git url
        type: string

      git_branch:
        description: git branch
        type: string

      base_port:
        description: Web application port
        type: integer


#################################################################
# Blueprint relationships
#
# Custom relatioships for this blueprint.
#################################################################
# relationships:

#     # Used for passing mongo environment variables 
#     # to the nodejs application
#     nodecellar_connected_to_mongo:
#         derived_from: cloudify.relationships.connected_to
#         source_interfaces:
#             cloudify.interfaces.relationship_lifecycle:
#                   postconfigure: 
#                       implementation: nodecellar-scripts/postconfigure.py


##################################################################
# Blueprint node_templates
#
# These are the actual blueprint nodes.
##################################################################
node_templates:

    # docker_container_test:
    #     type: cloudify.types.host
    #     interfaces:
    #         cloudify.interfaces.lifecycle:
    #             create:
    #             implementation: docker.docker_plugin.tasks.create
    #             inputs:
    #                 daemon_client: {}
    #                 image_import:
    #                     src: http://insert/url/to/image/here
    #                 # could also be image_build, see below
    #                 image_build:
    #                     path: /tmp/
    #                     rm: true

    #         configure:
    #             implementation: docker.docker_plugin.tasks.configure
    #             inputs:
    #                 daemon_client:    {}
    #                 container_config:
    #                     command: /bin/echo hello

    #         start:
    #             implementation: docker.docker_plugin.tasks.run
    #             inputs:
    #                 daemon_client:   {}
    #                 container_start: {}
    #         stop:
    #             implementation: docker.docker_plugin.tasks.stop
    #             inputs:
    #                 daemon_client:  {}
    #                 container_stop: {}
    #         delete:
    #             implementation: docker.docker_plugin.tasks.delete
    #             inputs:
    #                 daemon_client:    {}
    #                 # required in case container to remove is currently running
    #                 container_stop:   {}
    #                 container_remove: {}
    # Server to host both mongo and node
    vm:
        type: cloudify.types.host
        properties:
            ip: { get_input: host_ip }
            cloudify_agent:
                user: { get_input: agent_user }
                key: { get_input: agent_private_key_path }

    # docker
    docker_container:
        type: docker_container
        interfaces:
            cloudify.interfaces.lifecycle:                    
                create: scripts/install-docker.sh
        relationships:
            - type: cloudify.relationships.contained_in
              target: vm

    # the application node
    app:
        type: dockerised_app
        properties:
            app_name: { get_input: app_name }
            git_url: { get_input: git_url }
            git_branch: { get_input: git_branch }
            base_port: { get_input: base_port }
        interfaces:
            cloudify.interfaces.lifecycle:            
                  create: 
                    implementation: scripts/install-app.sh
                    inputs:
                        process:
                            # this directory should already exist
                            cwd: /tmp/
                            args:
                            env:
                                APP_NAME: { get_property: [ app, app_name ] }
                                APP_PORT: { get_property: [ app, base_port ] }                 
                  start:
                    implementation: scripts/start-app.sh
                    inputs:
                        process:
                            # this directory should already exist
                            cwd: /tmp/
                            args: [arg1_value, arg2_value]
                            env:
                                APP_NAME: { get_property: [ app, app_name ] }
                                APP_PORT: { get_property: [ app, base_port ] }  
                  stop: 
                    implementation: scripts/stop-app.sh
                    inputs:
                        process:
                            # this directory should already exist
                            cwd: /tmp/
                            args: [arg1_value, arg2_value]
                            env:
                                APP_NAME: { get_property: [ app, app_name ] }
                                APP_PORT: { get_property: [ app, base_port ] }                
        relationships:
            - type: cloudify.relationships.contained_in
              target: docker_container

######################################################################
# Blueprint outputs
#
# Accessible via 'cfy deployments outputs -d <deployment_id>'
######################################################################
outputs:

  # hit this endpoint to actually see the running application.
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_input: host_ip }
      port: { get_property: [ app, base_port ] }
